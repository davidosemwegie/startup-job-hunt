{"version":3,"sources":["components/Layout.tsx","components/HeroSection.tsx","components/Tag.tsx","components/JobRow.tsx","components/Button.tsx","components/JobList.tsx","components/JobDetails.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Hero","styled","div","Header","HeaderTitle","p","Layout","children","Container","HeroMessage","HeroSection","Tag","title","Left","Right","CompanyLogoImage","img","NoCompanyLogo","CompanyNameLetter","TitleGroup","TitleSubgroup","JobTitle","CompanyName","CityName","TagGroup","CompanyLogo","logoUrl","firstLetter","companyName","toUpperCase","src","JobRow","isoCode","tag1","tag2","tag3","city","slug","companySlug","to","countryCode","jobData","button","Button","onClick","JOBS_QUERY","gql","SearchForm","form","SearchInput","input","SearchError","h1","JobList","useQuery","loading","data","undefined","jobs","map","job","company","name","cities","country","tags","SearchingList","props","handleInputChage","e","value","currentTarget","setState","state","searching","console","log","res","forEach","toLowerCase","search","push","searchValue","bind","this","length","type","placeholder","onChange","React","Component","JobDetails","client","ApolloClient","cache","InMemoryCache","link","HttpLink","uri","App","ApolloProvider","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"q4BAQA,IAAMA,EAAOC,IAAOC,IAAV,KAaJC,EAASF,IAAOC,IAAV,KASNE,EAAcH,IAAOI,EAAV,KAgBFC,EAXiB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjC,OACE,kBAACP,EAAD,KACE,kBAACG,EAAD,KACE,kBAACC,EAAD,4BAEDG,I,sfCjCP,IAAMC,EAAYP,IAAOC,IAAV,KAYTO,EAAcR,IAAOI,EAAV,KAwBFK,EAZsB,WACnC,OACE,kBAACF,EAAD,KACE,kBAACC,EAAD,iCAC2B,6CAD3B,4B,0VChCN,IAAMD,EAAYP,IAAOI,EAAV,KAoBAM,EAJc,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC9B,OAAO,kBAAC,EAAD,KAAYA,I,q5ECbrB,IAAMJ,EAAYP,IAAOC,IAAV,KAWTW,EAAOZ,IAAOC,IAAV,KAKJY,GAAQb,IAAOC,IAAV,KAYLa,GAAmBd,IAAOe,IAAV,KAchBC,GAAgBhB,IAAOC,IAAV,KAiBbgB,GAAoBjB,IAAOI,EAAV,KASjBc,GAAalB,IAAOC,IAAV,KAOVkB,GAAgBnB,IAAOC,IAAV,KAEbmB,GAAWpB,IAAOI,EAAV,KAWRiB,GAAcrB,IAAOI,EAAV,KAUXkB,GAAWtB,IAAOI,EAAV,KAERmB,GAAWvB,IAAOC,IAAV,KA6BRuB,GAAmC,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,QACpCC,EAD+D,EAAlBC,YACnB,GAAGC,cAEnC,OAAIH,EACK,kBAACX,GAAD,CAAkBe,IAAKJ,GAAoB,KAGhD,kBAACT,GAAD,KACE,kBAACC,GAAD,KAAoBS,KA4CbI,GAtCiB,SAAC,GAW1B,IAVLnB,EAUI,EAVJA,MACAgB,EASI,EATJA,YACAI,EAQI,EARJA,QACAC,EAOI,EAPJA,KACAC,EAMI,EANJA,KACAC,EAKI,EALJA,KACAT,EAII,EAJJA,QACAU,EAGI,EAHJA,KACAC,EAEI,EAFJA,KACAC,EACI,EADJA,YAEA,OACE,kBAAC,EAAD,KACE,kBAACzB,EAAD,KACE,kBAAC,GAAD,CAAaa,QAASA,EAASE,YAAaA,IAC5C,kBAACT,GAAD,KACE,kBAACC,GAAD,KACE,kBAACC,GAAD,KACE,kBAAC,IAAD,CAAMkB,GAAE,eAAUD,EAAV,YAAyBD,IAASzB,IAE5C,kBAACU,GAAD,KAAcM,MAIpB,kBAACJ,GAAD,KACE,kBAAC,EAAD,CAAKZ,MAAOqB,IACZ,kBAAC,EAAD,CAAKrB,MAAOsB,IACZ,kBAAC,EAAD,CAAKtB,MAAOuB,KAEd,kBAACrB,GAAD,KACE,kBAAC,IAAD,CAAkB0B,YAAW,UAAKR,KAClC,kBAACT,GAAD,KAAWa,M,qjBC9KnB,ICIIK,GDJEjC,GAAYP,IAAOyC,OAAV,MA8BAC,GAJiB,SAAC,GAAwB,IAAtB/B,EAAqB,EAArBA,MAAOgC,EAAc,EAAdA,QACxC,OAAO,kBAAC,GAAD,CAAWA,QAASA,GAAUhC,I,spCCjBvC,IAAMiC,GAAaC,IAAH,MA4BVtC,GAAYP,IAAOC,IAAV,MAIT6C,GAAa9C,IAAO+C,KAAV,MAaVC,GAAchD,IAAOiD,MAAV,MAUXC,GAAclD,IAAOmD,GAAV,MAOXC,GAA2B,WAAO,IAAD,EACXC,YAAmBT,IAArCU,EAD6B,EAC7BA,QAASC,EADoB,EACpBA,KAIjB,OAFAf,GAAUe,QAAcC,EAEpBF,EACK,0CAIP,kBAAC,GAAD,KACGC,GACCA,EAAKE,MACLF,EAAKE,KAAKC,KAAI,SAAAC,GACZ,OACE,kBAAC,GAAD,CACEvB,KAAyB,oBAAZuB,EAAIvB,KAAsBuB,EAAIvB,KAAO,OAClDC,YAC8B,qBAArBsB,EAAIC,QAAQxB,KACfuB,EAAIC,QAAQxB,KACZ,OAENzB,MAA4B,qBAAdgD,EAAIhD,MAAwBgD,EAAIhD,MAAQ,YACtDgB,YAC8B,qBAArBgC,EAAIC,QAAQC,KACfF,EAAIC,QAAQC,KACZ,eAENpC,QACiC,qBAAxBkC,EAAIC,QAAQnC,QACfkC,EAAIC,QAAQnC,QACZ,eAENM,QAC2B,qBAAlB4B,EAAIG,OAAO,GACdH,EAAIG,OAAO,GAAGC,QAAQhC,QACtB,KAENC,KACyB,qBAAhB2B,EAAIK,KAAK,GAAqBL,EAAIK,KAAK,GAAGH,KAAO,MAE1D5B,KACyB,qBAAhB0B,EAAIK,KAAK,GAAqBL,EAAIK,KAAK,GAAGH,KAAO,MAE1D3B,KACyB,qBAAhByB,EAAIK,KAAK,GAAqBL,EAAIK,KAAK,GAAGH,KAAO,MAE1D1B,KAC2B,qBAAlBwB,EAAIG,OAAO,GAAqBH,EAAIG,OAAO,GAAGD,KAAO,YAiK7DI,G,kDA/Ib,WAAYC,GAAa,IAAD,8BACtB,cAAMA,IAWRC,iBAAmB,SAACC,GAClB,IAAMC,EAAQD,EAAEE,cAAcD,MAC9B,EAAKE,SAAL,2BACK,EAAKC,OADV,kBAEGJ,EAAEE,cAAcT,KAAOQ,KAE1B,EAAKE,SAAS,CAAEE,WAAW,IAC3BC,QAAQC,IAAIN,GAEZ,IAAMO,EAAa,GAEI,qBAAZpC,IACTA,GAAQiB,KAAKoB,SAAQ,SAAAlB,IAC0C,IAAzDA,EAAIhD,MAAMmE,cAAcC,OAAOV,EAAMS,gBACvCF,EAAII,KAAKrB,MAIf,EAAKY,SAAS,CACZhB,KAAMqB,KA5BR,EAAKJ,MAAQ,CACXC,WAAW,EACXQ,YAAa,GACb1B,KAAM,IAGR,EAAKY,iBAAmB,EAAKA,iBAAiBe,KAAtB,gBATF,E,qDAoCd,IAAD,EACkCC,KAAKX,MAAtCS,EADD,EACCA,YAAaR,EADd,EACcA,UAAWlB,EADzB,EACyBA,KAEhC,OAAKkB,GAA4B,IAAfQ,EAmBQ,GAAf1B,EAAK6B,OAEZ,6BACE,kBAACtC,GAAD,KACE,kBAACE,GAAD,CACEqC,KAAK,OACLC,YAAY,YACZjB,MAAOY,EACPpB,KAAK,cACL0B,SAAUJ,KAAKhB,mBAMjB,kBAACjB,GAAD,qBAMJ,6BACE,kBAACJ,GAAD,KACE,kBAACE,GAAD,CACEqC,KAAK,OACLC,YAAY,WACZjB,MAAOY,EACPpB,KAAK,cACL0B,SAAUJ,KAAKhB,mBAEjB,kBAAC,GAAD,CACExD,MAAM,SACNgC,QAAS,kBAAM+B,QAAQC,IAAI,8BAG9BpB,EAAKG,KAAI,SAAAC,GACR,OACE,kBAAC,GAAD,CACEtB,YAC8B,qBAArBsB,EAAIC,QAAQxB,KACfuB,EAAIC,QAAQxB,KACZ,OAENA,KAAyB,oBAAZuB,EAAIvB,KAAsBuB,EAAIvB,KAAO,OAClDzB,MACuB,qBAAdgD,EAAIhD,MAAwBgD,EAAIhD,MAAQ,YAEjDgB,YAC8B,qBAArBgC,EAAIC,QAAQC,KACfF,EAAIC,QAAQC,KACZ,eAENpC,QACiC,qBAAxBkC,EAAIC,QAAQnC,QACfkC,EAAIC,QAAQnC,QACZ,eAENM,QAC2B,qBAAlB4B,EAAIG,OAAO,GACdH,EAAIG,OAAO,GAAGC,QAAQhC,QACtB,KAENC,KACyB,qBAAhB2B,EAAIK,KAAK,GAAqBL,EAAIK,KAAK,GAAGH,KAAO,MAE1D5B,KACyB,qBAAhB0B,EAAIK,KAAK,GAAqBL,EAAIK,KAAK,GAAGH,KAAO,MAE1D3B,KACyB,qBAAhByB,EAAIK,KAAK,GAAqBL,EAAIK,KAAK,GAAGH,KAAO,MAE1D1B,KAC2B,qBAAlBwB,EAAIG,OAAO,GACdH,EAAIG,OAAO,GAAGD,KACd,WA3Fd,6BACE,kBAACf,GAAD,KACE,kBAACE,GAAD,CACEqC,KAAK,OACLC,YAAY,YACZjB,MAAOY,EACPpB,KAAK,cACL0B,SAAUJ,KAAKhB,oBAOnB,kBAAC,GAAD,W,GAxDkBqB,IAAMC,WClFnBC,GATe,WAC5B,OACE,6BACE,0C,6QCvCN,IAAMC,GAAS,IAAIC,IAAa,CAC9BC,MAAO,IAAIC,IACXC,KAAM,IAAIC,IAAS,CACjBC,IAAK,gCAgCMC,IA5BKlG,IAAOiD,MAAV,MAUK,WACpB,OACE,kBAAC,IAAD,KACE,kBAACkD,EAAA,EAAD,CAAgBR,OAAQA,IACtB,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAOS,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,GAAD,QAGJ,kBAAC,KAAD,CAAOD,OAAK,EAACC,KAAK,0BAA0BC,UAAWZ,UClC7Ca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.e4bdb028.chunk.js","sourcesContent":["import React from \"react\"\nimport styled from \"styled-components\"\n\ninterface Props {\n  children: any\n}\n\n// const Container = styled.div``\nconst Hero = styled.div`\n  background: linear-gradient(104deg, #02aab0 0%, #00cdac 100%);\n  width: 100%;\n  height: 450px;\n  position: absolute;\n  z-index: -1;\n  margin: 0 auto;\n\n  @media (max-width: 640px) {\n    font-size: 30px;\n  }\n`\n\nconst Header = styled.div`\n  /* background-color: pink; */\n  height: 80px;\n  width: 70%;\n  margin: 0 auto;\n  display: grid;\n  align-content: center;\n`\n\nconst HeaderTitle = styled.p`\n  margin: 0;\n  font-weight: 700;\n`\n\nconst Layout: React.FC<Props> = ({ children }) => {\n  return (\n    <Hero>\n      <Header>\n        <HeaderTitle>StartUpJobHunt.com</HeaderTitle>\n      </Header>\n      {children}\n    </Hero>\n  )\n}\n\nexport default Layout\n","import React, { Children } from \"react\"\nimport styled from \"styled-components\"\nimport Button from \"./Button\"\n\ninterface Props {\n  children?: any\n}\n\nconst Container = styled.div`\n  width: 70%;\n  margin: 0 auto;\n  height: 450px;\n  display: grid;\n  justify-content: center;\n  align-content: center;\n\n  @media (max-width: 640px) {\n    height: 380px;\n  }\n`\nconst HeroMessage = styled.p`\n  margin: 0;\n  font-size: 50px;\n  font-weight: 900;\n  -webkit-font-smoothing: antialiased;\n  text-align: center;\n\n  @media (max-width: 640px) {\n    font-size: 30px;\n  }\n`\n\nconst HeroSection: React.FC<Props> = () => {\n  return (\n    <Container>\n      <HeroMessage>\n        Find your dream job as a <code>{`{developer}`}</code> in a modern start\n        up.\n      </HeroMessage>\n      {/* {children} */}\n    </Container>\n  )\n}\n\nexport default HeroSection\n","import React from \"react\"\nimport styled from \"styled-components\"\n\nconst Container = styled.p`\n  color: #327ce0;\n  border-width: 1px;\n  border-color: #327ce0;\n  border-style: solid;\n  border-radius: 5px;\n  display: inline;\n  margin: 0 5px;\n  padding: 5px 10px;\n  font-size: 15px;\n`\n\ninterface Props {\n  title: string\n}\n\nconst Tag: React.FC<Props> = ({ title }) => {\n  return <Container>{title}</Container>\n}\n\nexport default Tag\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport data from \"../data\"\nimport Tag from \"./Tag\"\nimport ReactCountryFlag from \"react-country-flag\"\nimport { Link } from \"react-router-dom\"\n\nconst Container = styled.div`\n  width: 80%;\n  margin: 20px auto;\n  display: grid;\n  grid-template-columns: repeat(3, auto);\n\n  @media (max-width: 640px) {\n    grid-template-columns: repeat(1, auto);\n    width: 85%;\n  }\n`\nconst Left = styled.div`\n  display: flexbox;\n  flex-direction: row;\n`\n\nconst Right = styled.div`\n  display: flexbox;\n  flex-direction: row;\n  justify-content: flex-end;\n  align-items: center;\n  padding: 0;\n\n  @media (max-width: 640px) {\n    display: none;\n  }\n`\n\nconst CompanyLogoImage = styled.img`\n  height: 100px;\n  width: 100px;\n  border-radius: 20px;\n  margin-right: 20px;\n\n  @media (max-width: 640px) {\n    height: 60px;\n    width: 60px;\n    border-radius: 10px;\n    margin-right: 10px;\n  }\n`\n\nconst NoCompanyLogo = styled.div`\n  width: 100px;\n  height: 100px;\n  background-color: #d6d6d6;\n  border-radius: 20px;\n  display: flex;\n  justify-content: center;\n  align-content: center;\n  margin-right: 20px;\n\n  @media (max-width: 640px) {\n    height: 60px;\n    width: 60px;\n    border-radius: 10px;\n    margin-right: 10px;\n  }\n`\nconst CompanyNameLetter = styled.p`\n  color: #919191;\n  font-size: 30px;\n  font-weight: 700;\n\n  @media (max-width: 640px) {\n    font-size: 20px;\n  }\n`\nconst TitleGroup = styled.div`\n  display: flexbox;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 0;\n`\nconst TitleSubgroup = styled.div``\n\nconst JobTitle = styled.p`\n  font-size: 25px;\n  font-weight: 700;\n  margin: 0;\n\n  @media (max-width: 640px) {\n    font-size: 18px;\n    max-width: 220px;\n  }\n`\n\nconst CompanyName = styled.p`\n  margin: 0;\n  color: #d6d6d6;\n  font-weight: 700;\n\n  @media (max-width: 640px) {\n    font-size: 12px;\n  }\n`\n\nconst CityName = styled.p``\n\nconst TagGroup = styled.div`\n  display: flexbox;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  padding: 0;\n  @media (max-width: 1250px) {\n    display: none;\n  }\n`\n\ninterface Props {\n  title: string\n  tag1: string\n  tag2: string\n  tag3: string\n  isoCode: string\n  companyName: string\n  logoUrl: string\n  city: string\n  slug: string\n  companySlug: string\n}\n\ninterface LogoProps {\n  logoUrl: string\n  companyName: string\n}\n\nconst CompanyLogo: React.FC<LogoProps> = ({ logoUrl, companyName }) => {\n  const firstLetter = companyName[0].toUpperCase()\n\n  if (logoUrl) {\n    return <CompanyLogoImage src={logoUrl ? logoUrl : \"\"} />\n  } else {\n    return (\n      <NoCompanyLogo>\n        <CompanyNameLetter>{firstLetter}</CompanyNameLetter>\n      </NoCompanyLogo>\n    )\n  }\n}\n\nconst JobRow: React.FC<Props> = ({\n  title,\n  companyName,\n  isoCode,\n  tag1,\n  tag2,\n  tag3,\n  logoUrl,\n  city,\n  slug,\n  companySlug\n}) => {\n  return (\n    <Container>\n      <Left>\n        <CompanyLogo logoUrl={logoUrl} companyName={companyName} />\n        <TitleGroup>\n          <TitleSubgroup>\n            <JobTitle>\n              <Link to={`/job/${companySlug}/${slug}`}>{title}</Link>\n            </JobTitle>\n            <CompanyName>{companyName}</CompanyName>\n          </TitleSubgroup>\n        </TitleGroup>\n      </Left>\n      <TagGroup>\n        <Tag title={tag1} />\n        <Tag title={tag2} />\n        <Tag title={tag3} />\n      </TagGroup>\n      <Right>\n        <ReactCountryFlag countryCode={`${isoCode}`} />\n        <CityName>{city}</CityName>\n      </Right>\n    </Container>\n  )\n}\n\nexport default JobRow\n","import React from \"react\"\nimport styled from \"styled-components\"\n\ninterface Props {\n  title: string\n  onClick: () => any\n}\n\nconst Container = styled.button`\n  text-transform: uppercase;\n  color: white;\n  background-color: black;\n  max-width: 200px;\n  height: 60px;\n  border: none;\n  border-radius: 20px;\n  font-weight: 700;\n  font-size: 30px;\n  padding: 5px 25px;\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.25);\n  cursor: pointer;\n  transition: 1s cubic-bezier(0.2, 0.8, 0.2, 1);\n  margin: 0 auto;\n\n  &:hover {\n    background-color: white;\n    color: black;\n  }\n\n  /* @media (max-width: 640px) {\n    align-self: center;\n  } */\n`\n\nconst Button: React.FC<Props> = ({ title, onClick }) => {\n  return <Container onClick={onClick}>{title}</Container>\n}\n\nexport default Button\n","import React from \"react\"\nimport { useState, useEffect } from \"react\"\nimport { useQuery } from \"@apollo/client\"\nimport gql from \"graphql-tag\"\nimport styled from \"styled-components\"\nimport JobRow from \"./JobRow\"\nimport Button from \"./Button\"\n\n//Interfaces\nimport { City, Tag, Job } from \"../interface\"\nimport { type } from \"os\"\n\nlet jobData: JobsData | undefined\n\ninterface JobsData {\n  jobs: Job[]\n}\n\nconst JOBS_QUERY = gql`\n  {\n    jobs {\n      id\n      title\n      slug\n      company {\n        id\n        name\n        logoUrl\n        slug\n      }\n      cities {\n        id\n        name\n        country {\n          isoCode\n        }\n      }\n      tags(last: 3) {\n        id\n        name\n        slug\n      }\n    }\n  }\n`\n\nconst Container = styled.div`\n  margin: 20px auto;\n`\n\nconst SearchForm = styled.form`\n  display: grid;\n  grid-template-columns: auto auto;\n  grid-gap: 20px;\n  justify-content: center;\n  padding: 20px;\n\n  @media (max-width: 640px) {\n    grid-template-columns: auto;\n    /* grid-template-columns: repeat(1, auto); */\n  }\n`\n\nconst SearchInput = styled.input`\n  border: none;\n  width: 300px;\n  height: 60px;\n  border-radius: 20px;\n  font-size: 30px;\n  font-weight: 700;\n  padding-left: 20px;\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.25);\n`\nconst SearchError = styled.h1`\n  align-self: center;\n  color: red;\n`\n\ninterface Props {}\n\nconst JobList: React.FC<Props> = () => {\n  const { loading, data } = useQuery<JobsData>(JOBS_QUERY)\n\n  jobData = data ? data : undefined\n\n  if (loading) {\n    return <h1>Loading...</h1>\n  }\n\n  return (\n    <Container>\n      {data &&\n        data.jobs &&\n        data.jobs.map(job => {\n          return (\n            <JobRow\n              slug={typeof job.slug != \"undefined\" ? job.slug : \"slug\"}\n              companySlug={\n                typeof job.company.slug !== \"undefined\"\n                  ? job.company.slug\n                  : \"slug\"\n              }\n              title={typeof job.title !== \"undefined\" ? job.title : \"Job Title\"}\n              companyName={\n                typeof job.company.name !== \"undefined\"\n                  ? job.company.name\n                  : \"Company Name\"\n              }\n              logoUrl={\n                typeof job.company.logoUrl !== \"undefined\"\n                  ? job.company.logoUrl\n                  : \"Company Name\"\n              }\n              isoCode={\n                typeof job.cities[0] !== \"undefined\"\n                  ? job.cities[0].country.isoCode\n                  : \"NA\"\n              }\n              tag1={\n                typeof job.tags[0] !== \"undefined\" ? job.tags[0].name : \"Tag\"\n              }\n              tag2={\n                typeof job.tags[1] !== \"undefined\" ? job.tags[1].name : \"Tag\"\n              }\n              tag3={\n                typeof job.tags[2] !== \"undefined\" ? job.tags[2].name : \"Tag\"\n              }\n              city={\n                typeof job.cities[0] !== \"undefined\" ? job.cities[0].name : \"NA\"\n              }\n            />\n          )\n        })}\n    </Container>\n  )\n}\n\ninterface JobListProps {}\n\ninterface IState {\n  searching: boolean\n  searchValue: string | null\n  data: any\n}\n\nclass SearchingList extends React.Component<JobListProps, IState, JobsData> {\n  constructor(props: any) {\n    super(props)\n\n    this.state = {\n      searching: false,\n      searchValue: \"\",\n      data: []\n    }\n\n    this.handleInputChage = this.handleInputChage.bind(this)\n  }\n\n  handleInputChage = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.currentTarget.value\n    this.setState({\n      ...this.state,\n      [e.currentTarget.name]: value\n    })\n    this.setState({ searching: true })\n    console.log(value)\n\n    const res: Job[] = []\n\n    if (typeof jobData !== \"undefined\")\n      jobData.jobs.forEach(job => {\n        if (job.title.toLowerCase().search(value.toLowerCase()) !== -1) {\n          res.push(job)\n        }\n      })\n\n    this.setState({\n      data: res\n    })\n    // console.log(res)\n  }\n\n  render() {\n    const { searchValue, searching, data } = this.state\n\n    if (!searching || searchValue == \"\") {\n      return (\n        <div>\n          <SearchForm>\n            <SearchInput\n              type=\"text\"\n              placeholder=\"Search...\"\n              value={searchValue}\n              name=\"searchValue\"\n              onChange={this.handleInputChage}\n            />\n            {/* <Button\n              title=\"Search\"\n              onClick={() => console.log(\"The button was clicked\")}\n            /> */}\n          </SearchForm>\n          <JobList />\n        </div>\n      )\n    } else if (data.length == 0) {\n      return (\n        <div>\n          <SearchForm>\n            <SearchInput\n              type=\"text\"\n              placeholder=\"Search...\"\n              value={searchValue}\n              name=\"searchValue\"\n              onChange={this.handleInputChage}\n            />\n            {/* <Button\n              title=\"Search\"\n              onClick={() => console.log(\"The button was clicked\")}\n            /> */}\n            <SearchError>No Matches</SearchError>\n          </SearchForm>\n        </div>\n      )\n    } else {\n      return (\n        <div>\n          <SearchForm>\n            <SearchInput\n              type=\"text\"\n              placeholder=\"Location\"\n              value={searchValue}\n              name=\"searchValue\"\n              onChange={this.handleInputChage}\n            />\n            <Button\n              title=\"Search\"\n              onClick={() => console.log(\"The button was clicked\")}\n            />\n          </SearchForm>\n          {data.map(job => {\n            return (\n              <JobRow\n                companySlug={\n                  typeof job.company.slug !== \"undefined\"\n                    ? job.company.slug\n                    : \"slug\"\n                }\n                slug={typeof job.slug != \"undefined\" ? job.slug : \"slug\"}\n                title={\n                  typeof job.title !== \"undefined\" ? job.title : \"Job Title\"\n                }\n                companyName={\n                  typeof job.company.name !== \"undefined\"\n                    ? job.company.name\n                    : \"Company Name\"\n                }\n                logoUrl={\n                  typeof job.company.logoUrl !== \"undefined\"\n                    ? job.company.logoUrl\n                    : \"Company Name\"\n                }\n                isoCode={\n                  typeof job.cities[0] !== \"undefined\"\n                    ? job.cities[0].country.isoCode\n                    : \"NA\"\n                }\n                tag1={\n                  typeof job.tags[0] !== \"undefined\" ? job.tags[0].name : \"Tag\"\n                }\n                tag2={\n                  typeof job.tags[1] !== \"undefined\" ? job.tags[1].name : \"Tag\"\n                }\n                tag3={\n                  typeof job.tags[2] !== \"undefined\" ? job.tags[2].name : \"Tag\"\n                }\n                city={\n                  typeof job.cities[0] !== \"undefined\"\n                    ? job.cities[0].name\n                    : \"NA\"\n                }\n              />\n            )\n          })}\n        </div>\n      )\n    }\n  }\n}\n\nexport default SearchingList\n","import React, { useState, useEffect } from \"react\"\nimport { RouteComponentProps } from \"react-router-dom\"\nimport styled from \"styled-components\"\nimport { useQuery } from \"@apollo/client\"\nimport gql from \"graphql-tag\"\n\nimport { Job, JobsData } from \"../interface\"\n\n// interface DetailsProps extends RouteComponentProps<{ slug: string }> {\n//   match: {\n//     params: {\n//       companySlug: string\n//       slug: string\n//     }\n//   }\n// }\n\n// interface JobVars {\n//   companySlug: string\n//   jobSlug: string\n// }\n\n// interface JobData {\n//   job: any\n// }\n\n// const GET_JOB = gql`\n//   query GetJob($companySlug: String!, $jobSlug: String!) {\n//     job(input: { companySlug: $companySlug, jobSlug: $jobSlug }) {\n//       id\n//       title\n//       slug\n//       company {\n//         id\n//         name\n//         logoUrl\n//         slug\n//       }\n//       cities {\n//         id\n//         name\n//         country {\n//           isoCode\n//         }\n//       }\n//       tags(last: 3) {\n//         id\n//         name\n//         slug\n//       }\n//     }\n//   }\n// `\n\nconst JobDetails: React.SFC = () => {\n  return (\n    <div>\n      <h1>Job Page</h1>\n      {/* <h2>{jobData.title}</h2> */}\n    </div>\n  )\n}\n\nexport default JobDetails\n","import React from \"react\"\nimport {\n  ApolloProvider,\n  ApolloClient,\n  InMemoryCache,\n  HttpLink,\n  useQuery\n} from \"@apollo/client\"\nimport \"./App.css\"\nimport styled from \"styled-components\"\nimport Layout from \"./components/Layout\"\nimport HeroSection from \"./components/HeroSection\"\nimport Button from \"./components/Button\"\nimport JobList from \"./components/JobList\"\nimport SearchingList from \"./components/JobList\"\nimport JobDetails from \"./components/JobDetails\"\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\"\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: \"https://api.graphql.jobs/\"\n  })\n})\n\nconst SearchInput = styled.input`\n  border: none;\n  width: 300px;\n  height: 60px;\n  border-radius: 20px;\n  font-size: 30px;\n  font-weight: 700;\n  padding-left: 20px;\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.25);\n`\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <ApolloProvider client={client}>\n        <Switch>\n          <Route exact path=\"/\">\n            <Layout>\n              <HeroSection />\n              <SearchingList />\n            </Layout>\n          </Route>\n          <Route exact path=\"/job/:companySlug/:slug\" component={JobDetails} />\n        </Switch>\n      </ApolloProvider>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}